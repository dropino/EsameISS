System client

//MESSAGES

//Entering sequence
//client - smartbell
Request ringBell : ringBell(TEMP)
Reply tempOk : tempOk(ok) 
Reply tempNotOk : tempStatus(ok)

//client - Waiter
Dispatch accept : accept (ok) 
Dispatch informWait : informWait (TIME)
 
//Ordering tea
//client-waiter
Dispatch endCons: endCons(ok) 

Request readyToOrder: readyToOrder(TABLE) 
Reply   atTable: atTable(TABLE) 

Dispatch order : order(TEA) 
Dispatch teaHasArrived : teaHasArrived(ok)


//pay for the tea
Request readyToPay : readyToPay(TABLE) 
Reply atTheTable : atTheTable(ok)
Dispatch payed : payed(AMOUNT) 

Context ctxclient ip [host="127.0.0.1" port=8050]
Context ctxwaiter ip [host="127.0.0.1" port=8050]
Context ctxsmartbell ip [host="127.0.0.1" port=8050]

ExternalQActor waiter context ctxwaiter
ExternalQActor smartbell context ctxsmartbell 

QActor client context ctxclient{
	
	[# var Temp #]
	
		State s0 initial{
			println("client  s0")
			delay 2000
		}
		Goto outside
		
		State outside{
			println("client is outside")
			delay 2000
			request smartbell -m ringBell: ringBell(36) //random temp
		}
		Transition t0 
			whenReply tempNotOk -> end
			whenReply tempOk -> waitingInTheHall
			
			
		State waitingInTheHall{
			println("client is waiting in the hall")
			delay 2000			
		}
		Transition t1
			whenMsg informWait -> waitingInTheHall
			whenMsg accept -> seated
		
		
		State seated{
			println("client is waiting to order")
			delay 2000
			request waiter -m readyToOrder: readyToOrder(1)
		}
		Transition t3 
			whenReply atTable -> ordering
			
			
		State ordering{
			println("client is ordering")
			delay 2000
			forward waiter -m order: order(tea)
		}
		Goto waitingForTea 
		
		
		State waitingForTea{
			println("client is waitingForTea")
			delay 2000
		}
		Transition t4 
			whenMsg order -> drinkingTea
		
		
		State drinkingTea{
			println("client is drinkingTea")
			delay 10000
			request waiter -m readyToPay: readyToPay(ok)
		}
		Transition t5 
			whenReply atTable -> paying
			
				
		State paying{
			println("client is paying")
			delay 2000
		}
		Transition t6
			whenMsg payed ->  end
		
		
		State end{
			println("client | end")
			terminate 0
		}
			
}