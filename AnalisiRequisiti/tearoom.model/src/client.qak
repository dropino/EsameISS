System -trace client 

//MESSAGES

//Entering sequence
//client - smartbell
Request ringBell : ringBell(TEMP)
Reply tempStatus : tempStatus(status, ClientID) 

//client - Waiter
Dispatch admission : admission(MAXWAITTIME, clientID)
 
 
//Ordering tea
//client-waiter
Request readyToOrder: readyToOrder(TABLE,CLIENTID) 
Reply   atTable: atTable(TABLE,CLIENTID) 

Dispatch order : order(TEA, TABLE) 
Dispatch deliver : deliver (TABLE, CLIENTID) 


//pay for the tea
//client - waiter
Request readyToPay : readyToPay(TABLE) 
Reply waiterAtTheTable : waiterAtTheTable(ok)
Dispatch payed : payed(AMOUNT) 
Dispatch exit : exit(ok)

Event freedTable : freedTable(N)

Context ctxclient ip [host="localhost" port=8070]
Context ctxwaiter ip [host="localhost" port=8071]
Context ctxtearoom ip [host="localhost" port=8072] 

ExternalQActor waiter context ctxwaiter
ExternalQActor smartbell context ctxtearoom 
//CodedQActor   smartbell context ctxtearoom className "it.unibo.smartbell.Smartbell"
//CodedQActor   waiter context ctxwaiter className "it.unibo.waiter.Waiter"
//CodedQActor   barman context ctxtearoom className "it.unibo.barman.Barman"

QActor client context ctxclient{
	[#
		var WaitTime = 0
		var AdmittanceStatus = 0 
	#]
	
		State s0 initial{
			println("client | init")
		}
		Goto outside
		
		
		State outside{
			println("client | is outside")
			request smartbell -m ringBell: ringBell(36) //temperature of the client
//			onMsg ( tempStatus : tempStatus(status, ClientID)){
//				[# admittanceStatus = payloadArg(0).toString().toInt()#]
//			}		
		}
		Transition t0 whenReply tempStatus -> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# AdmittanceStatus = payloadArg(0).toString().toInt()#]
				
			}	
			println("Client | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client | waiting for the waiter to tell me if I can get in")
		}
		Transition t0 whenMsg admission -> evalAdmission
		
		State evalAdmission {			
			onMsg ( admission : admission(WaitTime, ClientID)){
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client | evaluated waiter admission message")
		}
		Goto waitingInTheHall if [# WaitTime != 0 #] else seated
		
		State waitingInTheHall{
			println("client | is waiting in the hall")			
		}
		Transition t0 whenTime 1000  -> seated
		
		
		State seated{
			println("client is seated")
			delay 2000
			request waiter -m readyToOrder: readyToOrder(1)
		}
		Transition t1
			whenReply atTable -> ordering
			
			
		State ordering{
			println("client is ordering some tea")
			delay 2000
			forward waiter -m order: order(tea)
		}
		Transition t2 
			whenMsg deliver -> drinkingTea
				
		
		State drinkingTea{
			println("client is drinking tea")
			delay 10000
			request waiter -m readyToPay: readyToPay(tableX)
		}
		Transition t3
			whenReply waiterAtTheTable -> paying
			
				
		State paying{
			println("client is paying")
			delay 2000
			forward waiter -m payed : payed(X)
		}
		Transition t4 
			whenMsg exit -> end	
		
		State end{
			println("client gets escorted to the exit door and leaves")
			terminate 0
		}
			
}