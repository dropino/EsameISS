System smartbell

Request ringBell : ringBell(TEMP)
Reply tempStatus : tempStatus(status, ClientID) 

Event clientID : clientID (CLIENTID) 

Context ctxtearoom   ip [host="localhost" port=8072] 
Context ctxclient 	ip [host="localhost" port=8070]

ExternalQActor client context ctxclient

//CodedQActor   client context ctxclient className "it.unibo.client.Client"


QActor smartbell context ctxtearoom {
 [# 
 	var Temp = 0
 	var CID = 0 
 #]
 
	State s0 initial {
		discardMsg Off
		println("--- Init ---")
	}
	Goto waitForClient
	
	State waitForClient {
		println("--- Wait Client ---")
	}
	Transition t0 whenRequest ringBell -> checkTemp
	
	State checkTemp {
		onMsg ( ringBell : ringBell (T) ) {
			println("--- Check Temp ---")
			[#Temp = payloadArg(0).toString().toInt() #]
		}
	}
	Goto handleEventTempOK if [# Temp <= 37.5 #] else handleEventTempKO
	
	State handleEventTempKO {
		println("--- Temp is over ---")
		println("--- Client Discard ---")
		replyTo ringBell with tempStatus : tempStatus (0, $CID)
	}
	Goto waitForClient
	
	State handleEventTempOK {
		println("--- Temp is OK ---")
		println("--- Client Accepted ---")
		[# CID = (1..100).random() #]
		replyTo ringBell with tempStatus : tempStatus (1, $CID)
		emit clientID : clientID ($CID)
	}
	Goto waitForClient				
}