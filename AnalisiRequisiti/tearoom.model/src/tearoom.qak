System tearoom

//MESSAGES

//ENTERING THE TEAROOM
//client - smartbell
Request  ringBell 			: ringBell(TEMP)
Reply 	 tempStatus 		: tempStatus(STATUS, CID) 

//smartbell - waiter
Event 	 clientID 			: clientID (CLIENTID)

//client - Waiter
Dispatch admission 			: admission(MAXWAITTIME, CID)
Event 	 waiterAtEntrance 	: waiterAtEntrance(OK)
 
//ORDERING
//client-waiter
Event 	 readyToOrder		: readyToOrder(TABLE,CID)

Request  getOrder 			: getOrder(TEA, TABLE, CID)
Reply    order 				: order(TEA) 

//waiter-barman
Dispatch sendOrder 			: sendOrder(TEA, TABLE) 
Dispatch deliver 			: deliver (TEA, TABLE) 
Event	 orderReady			: orderReady(TEA, TABLE)


//PAYING AND LEAVING
//client - waiter
Event	 readyToPay 			: readyToPay(TABLE, CID) 
Request  pay 				: pay(MONEY, CID)
Reply	 paid				: paid(MONEY)

Dispatch exit : exit(OK)

Event tableDirty : tableDirty(N)

Context ctxtearoomsys ip [host="localhost" port=8072] 

QActor client context ctxtearoomsys{
	[#
		var WaitTime = 0
		var AdmittanceStatus = 0 
		
		var MyTemp = 0
	#]
	
		State s0 initial{
			println("Client | INIT")
			[# MyTemp = (36..42).random() #]
		}
		Goto outside
		
		
		State outside{
			println("Client | ringing the bell")
			
			request smartbell -m ringBell: ringBell($MyTemp) //temperature of the client
//			onMsg ( tempStatus : tempStatus(status, ClientID)){
//				[# admittanceStatus = payloadArg(0).toString().toInt()#]
//			}		
		}
		Transition t0 whenReply tempStatus -> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# AdmittanceStatus = payloadArg(0).toString().toInt()#]
				
			}	
			println("Client | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client | waiting for the waiter to tell me if I can get in")
		}
		Transition t0 whenMsg admission -> evalAdmission
		
		State evalAdmission {			
			onMsg ( admission : admission(WaitTime, ClientID)){
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client | the waiter told me to wait $WaitTime time")
		}
		Goto waitingInTheHall
		
		State waitingInTheHall{
			println("Client | waiting in the hall")			
		}
		Transition t0 	whenTime 5000  -> end
						whenEvent waiterAtEntrance -> seated
		
		
		State seated{
			println("Client | being escorted to the table")
			delay 2000
			request waiter -m readyToOrder: readyToOrder(1)
		}
		Transition t1	whenReply atTable -> ordering
			
			
		State ordering{
			println("Client | ordering some tea")
			delay 2000
			forward waiter -m order: order(tea)
		}
		Transition t2 	whenMsg deliver -> drinkingTea
				
		
		State drinkingTea{
			println("Client | drinking tea")
			delay 10000
			request waiter -m readyToPay: readyToPay(tableX)
		}
		Transition t3
			whenReply waiterAtTheTable -> paying
			
				
		State paying{
			println("Client | paying")
			delay 2000
			forward waiter -m payed : payed(X)
		}
		Transition t4 
			whenMsg exit -> end	
		
		State end{
			println("Client | escorted to the exit door and leaves")
			terminate 0
		}
			
}

QActor waiter context ctxtearoomsys {
	
	[#
		var v = 0
		var CCID = ""	
		var TABLE = 0
		var AvailableTables = 2
	#]
	
	State s0 initial {	
		discardMsg Off
		delay 1000 		  
 	}	
  	Goto listening
  	
  	  	State listening {
		[# 	v = 0
			CCID = "" 
			TABLE = 0
			
			#]
 		println("Waiter | listening... ")
	}
	  Transition t0  	whenTime 	5000	 	 -> goHome
	  					whenEvent 	clientID  	 -> handleClientEntranceRequest
						whenRequest readyToOrder -> answerOrderRequest
						whenRequest readyToPay 	 -> answerPaymentRequest
						whenEvent 	tableToClean -> cleanTable
						whenMsg 	ready 		 -> deliverDrink
						whenEvent 	freedTable	 -> cleanTable
						
  	
  	State goHome {
 		println("Waiter | no tasks to do, going home... ")
 		delay 1000
// 		[# atHome = true #]
  	}
	  Transition t0 
	  					whenEvent 	clientID  	 -> handleClientEntranceRequest
						whenRequest readyToOrder -> answerOrderRequest
						whenRequest readyToPay 	 -> answerPaymentRequest
						whenEvent 	tableToClean -> cleanTable
						whenMsg 	ready 		 -> deliverDrink
						whenEvent 	freedTable	 -> cleanTable
  					
  	
  	State handleClientEntranceRequest {
  		delay 1000
  		println("Waiter | handling client request... ")
  		
  		[# AvailableTables-- #]
  		//if there are free tables accompany the client to the table, otherwise tell them how long will the wait be
  	}
  	Goto deployClientEntrance if [# AvailableTables >= 0 #] else notifyClientToWait

	State deployClientEntrance {
		println("Waiter | deploying client from entrance door to table... ")
		forward client -m admission : admission(0, $CCID)
		delay 1000
		emit waiterAtEntrance : waiterAtEntrance(ok)
	} 	
	Goto listening

	State deployClientExit {
		println("Waiter | deploying client from table to exit door... ")
		forward client -m exit : exit(ok)
		delay 1000
		[# AvailableTables++ #]
	} 	
	Goto listening
	
	State notifyClientToWait {
		println("Waiter | notifying client has to wait... ")
		forward client -m admission : admission(1000, $CCID)
	}
	Goto listening
						
	State answerOrderRequest {
		println("Waiter | reaching table to serve client... ")
		onMsg(readyToOrder : readyToOrder(TABLE, CID)) {
			[#  TABLE = payloadArg(0).toString().toInt()
				CCID = payloadArg(1).toString() #]
		}
		delay 1000
		replyTo readyToOrder with atTable : atTable(ok)
	}
	Transition t0 whenMsg order -> transferOrder
	
	State transferOrder {
		println("Waiter | sending order to barman... ")
		forward barman -m order : order(1, $TABLE)
	}
	Goto listening
	
	State answerPaymentRequest {
		println("Waiter | a client has finished consuming its tea... ")
		onMsg(readyToPay : readyToPay(table, CID)) {
			[#  TABLE = payloadArg(0).toString().toInt()
				CCID = payloadArg(0).toString() #]
		}
		delay 1000
		replyTo readyToPay with waiterAtTheTable : waiterAtTheTable( ok )
		emit freedTable : freedTable($TABLE)
	}
	Transition t0 whenMsg payed -> deployClientExit
	
	State cleanTable {
		onMsg(freedTable : freedTable(N)) {
			[#  TABLE = payloadArg(0).toString().toInt() #]
		}
		println("Waiter | going to table $TABLE... ")
		delay 2000
		println("Waiter | cleaning table $TABLE... ")
		delay 2000
	}
	Goto listening
	
	State deliverDrink {
		println("Waiter | going to barman... ")
		delay 2000
		println("Waiter | taking tea... ")
		println("Waiter | going to client table... ")
		delay 2000
		forward client -m deliver : deliver(table, cid)
	}
	Goto listening	
}

QActor smartbell context ctxtearoomsys {
 [# 
 	var Temp = 0
 	var CID = 0 
 #]
 
	State s0 initial {
		discardMsg Off
		println("--- SmartBell | Init ---")
	}
	Goto waitForClient
	
	State waitForClient {
		println("--- SmartBell | Wait Client ---")
	}
	Transition t0 whenRequest ringBell -> checkTemp
	
	State checkTemp {
		onMsg ( ringBell : ringBell (T) ) {
			println("--- SmartBell | Check Temp ---")
			[#Temp = payloadArg(0).toString().toInt() #]
		}
	}
	Goto handleEventTempOK if [# Temp < 37.5 #] else handleEventTempKO
	
	State handleEventTempKO {
		println("--- SmartBell | Temp is over ---")
		println("--- SmartBell | Client Discard ---")
		replyTo ringBell with tempStatus : tempStatus (0, $CID)
	}
	Goto waitForClient
	
	State handleEventTempOK {
		println("--- SmartBell | Temp is OK ---")
		println("--- SmartBell | Client Accepted ---")
		[# CID = (1..100).random() #]
		replyTo ringBell with tempStatus : tempStatus (1, $CID)
		emit clientID : clientID ($CID)
	}
	Goto waitForClient		
}


QActor barman context ctxtearoomsys {
	[#
		var Order = 0
		var ClientID = 0
	#]
	
	State s0 initial {
		discardMsg Off  
		println("--- Barman | Init ---")
	}
	Goto waitForNewOrder

	State waitForNewOrder {
		println("--- Barman | Waiting Order ---")
	}
	Transition t0 whenMsg order -> prepare
	
	State prepare {
		onMsg( order : order(V,CLIENTID) ){
			delay 1000
			println("--- Barman | Ready to serve ---")
			[#
				Order = payloadArg(0).toString().toInt()
				ClientID = payloadArg(1).toString().toInt()
			#]
		}
		forward waiter -m ready : ready($Order, $ClientID)
	}
	Goto waitForNewOrder
}