System tearoom

//MESSAGES

//ENTERING THE TEAROOM
//client - smartbell
Request  ringBell 			: ringBell(TEMP)
Reply 	 tempStatus 		: tempStatus(STATUS, CID) 

//smartbell - waiter
Event 	 clientID 			: clientID (CLIENTID)

//client - Waiter
Dispatch admission 			: admission(MAXWAITTIME, CID)
Event 	 waiterAtEntrance 	: waiterAtEntrance(OK)
Dispatch arrived			: arrived(TABLE)
 
//ORDERING
//client-waiter
Event 	 readyToOrder		: readyToOrder(TABLE,CID)

Request  getOrder 			: getOrder(TEA, TABLE, CID)
Reply    order 				: order(TEA) 

//waiter-barman
Dispatch sendOrder 			: sendOrder(TEA, TABLE) 
Dispatch deliver 			: deliver (TEA) 
Event	 orderReady			: orderReady(TEA, TABLE)


//PAYING AND LEAVING
//client - waiter
Event	 readyToPay 		: readyToPay(TABLE, CID) 
Request  pay 				: pay(MONEY, CID)
Reply	 paid				: paid(MONEY)

Dispatch exit 				: exit(OK)

//TABLE DIRTY NOTIFICATION
Event tableDirty 			: tableDirty(N)

Context ctxtearoomsys ip [host="localhost" port=8072] 
Context ctxclientsys ip [host="127.0.0.1" port=8071] 

QActor client context ctxclientsys{
	[#
		var WaitTime 			= 0
		var AdmittanceStatus 	= 0 
		
		var MyTemp 				= 0
		var MyTable				= 0
		var MyCID 				= ""
		var ToPay 				= 0
	#]
	
		State s0 initial{
			println("Client | INIT")
			[# MyTemp = (36..42).random() #] 
		}
		Goto outside
		
		
		State outside{
			println("Client | ringing the bell")
			
			request smartbell -m ringBell: ringBell($MyTemp) //temperature of the client		
		}
		Transition t0 whenReply tempStatus 			-> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# 
					AdmittanceStatus = payloadArg(0).toString().toInt()
					MyCID = payloadArg(1).toString()
				#]
				
			}	
			println("Client $MyCID | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client $MyCID | waiting for the waiter to tell me if I can get in")
		}
		Transition t0 whenMsg admission 			-> evalAdmission
		
		State evalAdmission {			
			onMsg ( admission : admission(WAITTIME, CID)){
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client $MyCID | the waiter told me to wait $WaitTime time")
		}
		Goto waitingInTheHall
		
		State waitingInTheHall{
			println("Client $MyCID | waiting in the hall")			
		}
		Transition t0 	whenTime 5000  				-> end
						whenEvent waiterAtEntrance 	-> beingEscorted
		
		State beingEscorted {
			println("Client $MyCID | being escorted to the table")
		}
		Transition t0 	whenMsg arrived  			-> seated
		
		State seated {
			onMsg ( arrived : arrived(TABLE)) {
				[# MyTable = payloadArg(0).toString().toInt()#]
			}
			
			println("Client $MyCID | my table is $MyTable")

			emit readyToOrder: readyToOrder($MyTable, $MyCID)
		}
		Transition t0	whenRequest getOrder 		-> ordering
			
			
		State ordering{
			println("Client $MyCID | ordering some tea")
			delay 2000
			replyTo getOrder with order: order(tea)
		}
		Transition t0 	whenMsg deliver 			-> drinkingTea
				
		
		State drinkingTea{
			println("Client $MyCID | drinking tea")
			delay 10000
			emit readyToPay: readyToPay($MyTable, $MyCID)
		}
		Transition t0	whenRequest pay 			-> paying
			
				
		State paying{
			println("Client $MyCID | paying")
			onMsg ( pay : pay(MONEY, CID)) {
				[# ToPay = payloadArg(0).toString().toInt()#]
			}
			delay 2000
			replyTo pay with paid : paid($ToPay)
		}
		Transition t0 	whenMsg exit 				-> end	
		
		State end {
			println("Client | escorted to the exit door and leaves")
			terminate 0
		}
			
}

QActor waiter context ctxtearoomsys {
	
	[#
		var CCID 			= ""	
		var CTABLE 			= 0
		
		var T1 = 1
		var T2 = 1
	#]
	
	State s0 initial {	
		discardMsg Off
		delay 1000 		  
 	}	
  	Goto listening
  	
  	  	State listening {
		[# 	
			CCID 	= "" 
			CTABLE 	= 0
			#]
 		println("Waiter | listening... ")
	}
	  Transition t0  	whenTime 	5000	 	 -> goHome
	  					whenEvent 	clientID  	 -> handleClientEntranceRequest
						whenEvent 	readyToOrder -> answerOrderRequest
						whenEvent	readyToPay 	 -> answerPaymentRequest
						whenEvent 	orderReady 	 -> deliverDrink
						whenEvent 	tableDirty	 -> cleanTable
						
  	
  	State goHome {
 		println("Waiter | no tasks to do, going home... ")
 		delay 1000
  	}
	  Transition t0 
	  					whenEvent 	clientID  	 -> handleClientEntranceRequest
						whenEvent 	readyToOrder -> answerOrderRequest
						whenEvent	readyToPay 	 -> answerPaymentRequest
						whenEvent 	orderReady 	 -> deliverDrink
						whenEvent 	tableDirty	 -> cleanTable
  					
  	
  	State handleClientEntranceRequest {
  		delay 1000
  		println("Waiter | handling client request... ")
  		
  		onMsg(clientID : clientID(CID)){
  			[#
  				CCID = payloadArg(0).toString()
  			#]
  		}
  	}
  	Goto deployClientEntrance if [# T1 == 1 || T2 == 1 #] else notifyClientToWait

	State deployClientEntrance {
		println("Waiter | deploying client from entrance door to table... ")
		forward client -m admission : admission(0, $CCID)
		delay 1000
		emit 	waiterAtEntrance 	: waiterAtEntrance(ok)
		delay 2000
		[# 
			if(T1 == 1)
			{
				CTABLE = 1
				T1 = 0 
			}
			else {
				CTABLE = 2
				T2 = 0
			} #
		]
		forward client -m arrived	: arrived($CTABLE)
	} 	
	Goto listening

	State deployClientExit {
		println("Waiter | deploying client from table to exit door... ")
		emit tableDirty : tableDirty($CTABLE)
		[#
			if (CTABLE == 1)
			{
				T1 = 1
			}
			else
			{
				T2 = 1
			}
			#
		]
		delay 1000
		
		forward client -m exit : exit(ok)
		
	} 	
	Goto listening
	
	State notifyClientToWait {
		println("Waiter | notifying client has to wait... ")
		forward client -m admission : admission(1000, $CCID)
	}
	Goto listening
						
	State answerOrderRequest {
		println("Waiter | reaching table to serve client... ")
		onMsg(readyToOrder : readyToOrder(TABLE, CID)) {
			[#  CTABLE = payloadArg(0).toString().toInt()
				CCID = payloadArg(1).toString() #]
		}
		delay 1000
		request client -m getOrder : getOrder($CTABLE)
	}
	Transition t0 whenReply order -> transferOrder
	
	State transferOrder {
		println("Waiter | sending order to barman... ")
		forward barman -m sendOrder : sendOrder(TEA, $CTABLE)
	}
	Goto listening
	
	State answerPaymentRequest {
		println("Waiter | a client has finished consuming its tea... ")
		onMsg(readyToPay : readyToPay(TABLE, CID)) {
			[#  CTABLE = payloadArg(0).toString().toInt()
				CCID = payloadArg(1).toString() #]
		}
		delay 1000
		request client -m pay : pay( 5, $CCID )
	}
	Transition t0 whenReply paid -> deployClientExit
	
	State cleanTable {
		onMsg(tableDirty : tableDirty(N)) {
			[#  CTABLE = payloadArg(0).toString().toInt() #]
		}
		println("Waiter | going to table $CTABLE... ")
		delay 2000
		println("Waiter | cleaning table $CTABLE... ")
		delay 2000
	}
	Goto listening
	
	State deliverDrink {
		
		onMsg(orderReady : orderReady(TEA, TABLE)) {
			[# CTABLE = payloadArg(1).toString().toInt() #]
		}
		
		println("Waiter | going to barman... ")
		delay 2000
		println("Waiter | taking tea... ")
		println("Waiter | going to client table $CTABLE... ")
		delay 2000
		forward client -m deliver : deliver(tea)
	}
	Goto listening	
}

QActor smartbell context ctxtearoomsys {
 [# 
 	var Temp = 0
 	var CID = 0 
 #]
 
	State s0 initial {
		discardMsg Off
		println("SmartBell | Init")
	}
	Goto waitForClient
	
	State waitForClient {
		println("  SmartBell | Wait Client  ")
	}
	Transition t0 whenRequest ringBell -> checkTemp
	
	State checkTemp {
		onMsg ( ringBell : ringBell (T) ) {
			[#Temp = payloadArg(0).toString().toInt() #]
			
			println("  SmartBell | Check Temp $Temp ")
			
		}
	}
	Goto handleEventTempOK if [# Temp < 37.5 && Temp >= 35.5 #] else handleEventTempKO
	
	State handleEventTempKO {
		println("  SmartBell | Temp is over  ")
		println("  SmartBell | Client Discard  ")
		replyTo ringBell with tempStatus : tempStatus (0, $CID)
	}
	Goto waitForClient
	
	State handleEventTempOK {
		println("  SmartBell | Temp is OK  ")
		println("  SmartBell | Client Accepted  ")
		[# CID = (1..100).random() #]
		replyTo ringBell with tempStatus : tempStatus (1, $CID)
		emit clientID : clientID ($CID)
	}
	Goto waitForClient		
}


QActor barman context ctxtearoomsys {
	[#
		var CTABLE = 0
	#]
	
	State s0 initial {
		discardMsg Off  
		println("  Barman | Init  ")
	}
	Goto waitForNewOrder

	State waitForNewOrder {
		println("  Barman | Waiting Order  ")
	}
	Transition t0 whenMsg sendOrder -> prepare
	
	State prepare {
		onMsg( sendOrder : sendOrder(TEA, TABLE) ){
			println("  Barman | Ready to serve  ")
			[#
				CTABLE = payloadArg(1).toString().toInt()
			#]
		}
		
		delay 2000
		emit orderReady : orderReady(tea, $CTABLE)
	}
	Goto waitForNewOrder
}