System tearoom
mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   

//MESSAGES

//Waiter-Waiterwalker
Event    walkerstarted   	: walkerstarted(X)

Request  moveForTask 		: moveForTask(TASK, N)
Reply    movementDone   	: movementDone(OK)
Reply	 walkbreak  		: walkbreak(X,Y)

//Waiter-itself
Dispatch rest				: rest(V)

//ENTERING THE TEAROOM
//client - smartbell
Request  ringBell 			: ringBell(TEMP)
Reply 	 tempStatus 		: tempStatus(STATUS, CID) 

//smartbell - waiter
Dispatch 	 clientID 		: clientID (CLIENTID)

//client - Waiter
Dispatch admission 			: admission(MAXWAITTIME, CID)
Dispatch waiterAtEntrance 	: waiterAtEntrance(OK)
Dispatch arrived			: arrived(TABLE)
 
//ORDERING
//client-waiter
Dispatch clientRequest		: clientRequest(TABLE,CID)

Request  getRequest 		: getRequest(TABLE, CID, V)
Reply    order 				: order(TEA) 
Reply	 paid				: paid(MONEY)

//waiter-barman
Dispatch sendOrder 			: sendOrder(TEA, TABLE) 
Dispatch deliver 			: deliver (TEA) 
Dispatch orderReady			: orderReady(TEA, TABLE)

//TABLE DIRTY NOTIFICATION
Dispatch tableDirty 		: tableDirty(N)



Context ctxtearoom ip [host="localhost" port=8072] 

CodedQActor waiterwalker context ctxtearoom className "it.unibo.waiterwalker.Waiterwalker"

QActor client context ctxtearoom {
	[#
		var WaitTime 			= 0
		var AdmittanceStatus 	= 0 
		
		var MyTemp 				= 0
		var MyTable				= 0
		var MyCID 				= ""
		var ToPay 				= 0
	#]
	
		State s0 initial{
			println("Client | INIT")
			[# MyTemp = (36..37).random() #]
		}
		Goto outside
		
		
		State outside{
			println("Client | ringing the bell")
			
			request smartbell -m ringBell: ringBell($MyTemp) //temperature of the client		
		}
		Transition t0 whenReply tempStatus -> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# 
					AdmittanceStatus = payloadArg(0).toString().toInt()
					MyCID = payloadArg(1).toString()
				#]
				
			}	
			println("Client $MyCID | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client $MyCID | waiting for the waiter to tell me if I can get in")
		}
		Transition t0 whenMsg admission 			-> evalAdmission
		
		State evalAdmission {			
			onMsg ( admission : admission(WAITTIME, CID)){
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client $MyCID | the waiter told me to wait $WaitTime time")
		}
		Goto waitingInTheHall
		
		State waitingInTheHall{
			println("Client $MyCID | waiting in the hall")			
		}
		Transition t0 	whenTime 20000  			-> end
						whenMsg	 waiterAtEntrance 	-> beingEscorted
		
		State beingEscorted {
			println("Client $MyCID | being escorted to the table")
		}
		Transition t0 	whenMsg arrived  			-> seated
		
		State seated {
			onMsg ( arrived : arrived(TABLE)) {
				[# MyTable = payloadArg(0).toString().toInt()#]
			}
			
			println("Client $MyCID | my table is $MyTable")

			forward waiter -m clientRequest : clientRequest($MyTable, $MyCID)
		}
		Transition t0	whenRequest getRequest 		-> ordering
			
			
		State ordering{
			println("Client $MyCID | ordering some tea")
			delay 2000
			replyTo getRequest with order: order(tea)
		}
		Transition t0 	whenMsg 	deliver 		-> drinkingTea
				
		
		State drinkingTea{
			println("Client $MyCID | drinking tea")
			delay 10000
			forward waiter -m clientRequest : clientRequest($MyTable, $MyCID)
		}
		Transition t0	whenRequest getRequest 		-> paying
			
				
		State paying{
			onMsg ( getRequest : getRequest(TABLE, CID, V)) {
				[# ToPay = payloadArg(2).toString().toInt()#]
			}
			println("Client $MyCID | paying $ToPay euro") 
			
			delay 2000
			replyTo getRequest with paid : paid($ToPay)
		}
		Transition t0 	whenMsg arrived				-> end	
		
		State end {
			println("Client | escorted to the exit door and leaves")
			terminate 0
		}
			
}

QActor waiter context ctxtearoom {
	
	[#
		var CCID 			= ""	
		var CTABLE 			= 0
		var BILL			= 5
		
		var Ntables			= 0
		
		var CurST			= ""
	#]
	
	State s0 initial {	
		println("Waiter | INIT ")
		
 		solve( consult("tearoomkb.pl")	 )
 		
 		discardMsg Off
		delay 3000 		  
 	}	
  	Transition t0 whenEvent walkerstarted -> listening
  	 
  	  	State listening {
		[# 	
			CCID 	= "" 
			CTABLE 	= 0
			#]
 		println("Waiter | listening... ")
 		updateResource [#"listening"#]
	}
	  Transition t0  	whenTime 	5000	 	 	-> goHome
	  					whenMsg 	clientID  	 	-> handleClientEntranceRequest
						whenMsg 	clientRequest 	-> answerClientRequest
						whenMsg 	orderReady 	 	-> getDrink
						whenMsg 	tableDirty	 	-> cleanTable
						
  	
  	State goHome {
  		
  		solve( waiter(ST) ) 
		ifSolved { [# CurST = getCurSol("ST").toString()  #] 
			println("waiter | current waiter state: $CurST")
		}
  		
  		if [# CurST != "atHome" #] {  			
 			request waiterwalker -m moveForTask : moveForTask(home, 1)
 			solve ( changeWaiterState(atHome) )	
  		} 
		else{ 
			forward waiter -m rest : rest(0)
		}
  	}
	  Transition t0 	whenReply	movementDone 	-> listening
	  	  				whenReply	walkbreak	 	-> error
	  					whenMsg		rest	 		-> listening
  	
  	State handleClientEntranceRequest {
  		println("Waiter | handling client request... ")  		
  		onMsg(clientID : clientID(CID)){
  			[#
  				CCID = payloadArg(0).toString()
  			#]
  		}
  		
  		solve( numavailabletables(N) ) 
		ifSolved { [# Ntables = getCurSol("N").toString().toInt()  #] 
			println("waiter | numavailabletables=$Ntables")
		}
		
		solve( tableavailable(N) ) 
		ifSolved { [# CTABLE = getCurSol("N").toString().toInt()  #] 
			println("waiter | tableavailable=$CTABLE")					 
			solve( engageTable($CTABLE, $CCID ) ) 
	 	}	
  		
  	}
  	Goto goToEntrance if [# Ntables > 0 #] else notifyClientToWait

	State goToEntrance {
		
		println("Waiter | GOING to ENTRANCE door ")
		forward client -m admission : admission(0, $CCID)
		request waiterwalker -m moveForTask : moveForTask(entrancedoor, 1)
		solve ( changeWaiterState(moving) )			
	}
	 Transition t0		whenReply	movementDone -> deployClientEntrance
	  					whenReply	walkbreak	 -> error
	
	State deployClientEntrance {		
		updateResource[# "waiter_arrived" #]
		forward client -m 	waiterAtEntrance 	: waiterAtEntrance(ok)
		
		println("Waiter | DEPLOYING client $CCID to table $CTABLE")
		
		request waiterwalker -m moveForTask : moveForTask(teatable, $CTABLE)
	} 	
	 Transition t0		whenReply	movementDone -> confirmClientArrival
	  					whenReply	walkbreak	 -> error	

	State deployClientExit {
		
		println("Waiter | deploying client from table to exit door... ")
		forward waiter -m tableDirty : tableDirty($CTABLE)

		request waiterwalker -m moveForTask : moveForTask(exitdoor, 1)
		
	} 	
	 Transition t0		whenReply	movementDone -> confirmClientArrival
	  					whenReply	walkbreak	 -> error	
	  					
	State confirmClientArrival {
		updateResource[# "waiter_rdy_leave" #] // stato usato per deploy client exit
		
		println("Waiter | SENDING CONFIRMATION to client $CCID: arrived at table $CTABLE")
		
		forward client -m arrived	: arrived($CTABLE)
	} Goto listening
	
	State notifyClientToWait {
		println("Waiter | notifying client has to wait... ")
		forward client -m admission : admission(10000, $CCID) 
	}
	Goto listening
						
	State answerClientRequest {
		onMsg(clientRequest : clientRequest(TABLE, CID)) {
			[#  CTABLE = payloadArg(0).toString().toInt()
				CCID = payloadArg(1).toString() #]
		}
		request waiterwalker -m moveForTask : moveForTask(teatable, $CTABLE)
		solve ( changeWaiterState(moving) )	
		
	}
	 Transition t0		whenReply	movementDone -> atTableForRequest
	  					whenReply	walkbreak	 -> error	
	
	State atTableForRequest {
		request client -m getRequest : getRequest($CTABLE, $CCID, $BILL)
	}
	Transition t0 		whenReply 	order 		-> transferOrder
						whenReply 	paid 		-> deployClientExit
	
	State transferOrder {
		println("Waiter | sending order to barman... ")
		forward barman -m sendOrder : sendOrder(TEA, $CTABLE)
	}
	Goto listening
	
	State cleanTable {
		onMsg(tableDirty : tableDirty(N)) {
			[#  CTABLE = payloadArg(0).toString().toInt() #]
		}
		println("Waiter | going to table for CLEANING $CTABLE... ")
		request waiterwalker -m moveForTask : moveForTask(teatable, $CTABLE)
		solve ( changeWaiterState(moving) )		
	}
	Transition t0		whenReply	movementDone -> atTableToClean
	  					whenReply	walkbreak	 -> error
	
	State atTableToClean {
		
		println("Waiter | cleaning table $CTABLE... ")
		delay 5000
		solve( cleanTable($CTABLE) )
	}
	Goto listening

	
	State getDrink {
		
		onMsg(orderReady : orderReady(TEA, TABLE)) {
			[# CTABLE = payloadArg(1).toString().toInt() #]
		}
		
		println("Waiter | going to barman... ")
		request waiterwalker -m moveForTask : moveForTask(barman, 1)
		solve ( changeWaiterState(moving) )	
	}
	Transition t0 		whenReply	movementDone -> bringDrinkToClient
	  					whenReply	walkbreak	 -> error	
	
	State bringDrinkToClient {
		updateResource[# "waiter_rdy_getDrink" #]
		println("Waiter | taking tea... ")
		println("Waiter | going to client table $CTABLE... ")

		request waiterwalker -m moveForTask : moveForTask(teatable, $CTABLE)
	}
	Transition t0 		whenReply	movementDone -> leaveDrinkAtTable
	  					whenReply	walkbreak	 -> error	
			
	State leaveDrinkAtTable {
		println("Waiter | giving the client the tea")
		updateResource[# "waiter_rdy_bringDrink" #]
		
		forward client -m deliver : deliver(tea)
	}
	Goto listening
	
	State error {
		println("&&& Waiter | an error occurred while walking. ")
	} Goto listening
}

QActor smartbell context ctxtearoom {
 [# 
 	var Temp = 0
 	var CID = 0 
 #]
 
	State s0 initial {
		discardMsg Off
		println("SmartBell | INIT")
	}
	Goto waitForClient
	
	State waitForClient {
		println("  SmartBell | Wait Client  ")
	}
	Transition t0 whenRequest ringBell -> checkTemp
	
	State checkTemp {
		onMsg ( ringBell : ringBell (T) ) {
			[#Temp = payloadArg(0).toString().toInt() #]
			
			println("  SmartBell | Check Temp $Temp ")
			
		}
	}
	Goto handleEventTempOK if [# Temp < 37.5 && Temp >= 35.5 #] else handleEventTempKO
	
	State handleEventTempKO {
		println("  SmartBell | Temp is over  ")
		println("  SmartBell | Client Discard  ")
		replyTo ringBell with tempStatus : tempStatus (0, $CID)
	}
	Goto waitForClient
	
	State handleEventTempOK {
		println("  SmartBell | Temp is OK  ")
		println("  SmartBell | Client Accepted  ")
		[# CID = (1..100).random() #]
		replyTo ringBell with tempStatus : tempStatus (1, $CID)
		forward waiter -m clientID : clientID ($CID)
	}
	Goto waitForClient		
}


QActor barman context ctxtearoom {
	[#
		var CTABLE = 0
	#]
	
	State s0 initial {
		discardMsg Off  
		println("  Barman | INIT  ")
	}
	Goto waitForNewOrder

	State waitForNewOrder {
		println("  Barman | Waiting Order  ")
	}
	Transition t0 whenMsg sendOrder -> prepare
	
	State prepare {
		onMsg( sendOrder : sendOrder(TEA, TABLE) ){
			println("  Barman | Ready to serve  ")
			[#
				CTABLE = payloadArg(1).toString().toInt()
			#]
		}
		
		delay 2000
		forward waiter -m orderReady : orderReady(tea, $CTABLE)
	}
	Goto waitForNewOrder
}