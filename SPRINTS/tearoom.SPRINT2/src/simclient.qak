System client 
//ENTERING THE TEAROOM
//client - smartbell
Request  ringBell 			: ringBell(TEMP)
Reply 	 tempStatus 		: tempStatus(STATUS, CID) 

//client - Waiter
Dispatch admission 			: admission(MAXWAITTIME, CID)
Dispatch waiterAtEntrance 	: waiterAtEntrance(OK)
Dispatch arrived			: arrived(TABLE)
 
//ORDERING
//client-waiter
Dispatch clientRequest		: clientRequest(TABLE,CID)

Request  getRequest 		: getRequest(TABLE, CID, V)
Reply    order 				: order(TEA) 
Reply	 paid				: paid(MONEY)

Dispatch deliver 			: deliver (TEA) 

Context ctxclient	ip [host="localhost"	port=8071]
Context ctxtearoom	ip [host="localhost"	port=8072]

ExternalQActor smartbell context ctxtearoom
ExternalQActor waiter	 context ctxtearoom

QActor simclient context ctxclient {
	[#
		var WaitTime 			= 0
		var AdmittanceStatus 	= 0 
		
		var MyTemp 				= 0
		var MyTable				= 0
		var MyCID 				= ""
		var ToPay 				= 0
	#]
	
		State s0 initial{
			println("Client | INIT")
			[# MyTemp = (36..37).random() #]
		}
		Goto outside
		
		
		State outside{
			println("Client | ringing the bell")
			
			request smartbell -m ringBell: ringBell($MyTemp) //temperature of the client		
		}
		Transition t0 whenReply tempStatus -> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# 
					AdmittanceStatus = payloadArg(0).toString().toInt()
					MyCID = payloadArg(1).toString()
				#]
				
			}	
			println("Client $MyCID | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client $MyCID | waiting for the waiter to tell me if I can get in")
		}
		Transition t0 whenMsg admission 			-> evalAdmission
		
		State evalAdmission {			
			onMsg ( admission : admission(WAITTIME, CID)){
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client $MyCID | the waiter told me to wait $WaitTime time")
		}
		Goto waitingInTheHall
		
		State waitingInTheHall{
			println("Client $MyCID | waiting in the hall")			
		}
		Transition t0 	whenTime 20000  			-> end
						whenMsg	 waiterAtEntrance 	-> beingEscorted
		
		State beingEscorted {
			println("Client $MyCID | being escorted to the table")
		}
		Transition t0 	whenMsg arrived  			-> seated
		
		State seated {
			onMsg ( arrived : arrived(TABLE)) {
				[# MyTable = payloadArg(0).toString().toInt()#]
			}
			
			println("Client $MyCID | my table is $MyTable")

			forward waiter -m clientRequest : clientRequest($MyTable, $MyCID)
		}
		Transition t0	whenRequest getRequest 		-> ordering
			
			
		State ordering{
			println("Client $MyCID | ordering some tea")
			delay 2000
			replyTo getRequest with order: order(tea)
		}
		Transition t0 	whenMsg 	deliver 		-> drinkingTea
				
		
		State drinkingTea{
			println("Client $MyCID | drinking tea")
			delay 10000
			forward waiter -m clientRequest : clientRequest($MyTable, $MyCID)
		}
		Transition t0	whenRequest getRequest 		-> paying
			
				
		State paying{
			onMsg ( getRequest : getRequest(TABLE, CID, V)) {
				[# ToPay = payloadArg(2).toString().toInt()#]
			}
			println("Client $MyCID | paying $ToPay euro") 
			
			delay 2000
			replyTo getRequest with paid : paid($ToPay)
		}
		Transition t0 	whenMsg arrived				-> end	
		
		State end {
			println("Client | escorted to the exit door and leaves")
			terminate 0
		}
			
}
