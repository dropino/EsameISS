/* Generated by AN DISI Unibo */ 
package it.unibo.simclient

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Simclient ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var WaitTime 			= 0
				var AdmittanceStatus 	= 0 
				
				var MyTemp 				= 0
				var MyTable				= 0
				var MyCID 				= ""
				var ToPay 				= 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Client | INIT")
						 MyTemp = (36..37).random()  
					}
					 transition( edgeName="goto",targetState="outside", cond=doswitch() )
				}	 
				state("outside") { //this:State
					action { //it:State
						println("Client | ringing the bell")
						request("ringBell", "ringBell($MyTemp)" ,"smartbell" )  
					}
					 transition(edgeName="t00",targetState="evalTemperature",cond=whenReply("tempStatus"))
				}	 
				state("evalTemperature") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tempStatus(STATUS,CID)"), Term.createTerm("tempStatus(STATUS,CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
													AdmittanceStatus = payloadArg(0).toString().toInt()
													MyCID = payloadArg(1).toString()
						}
						println("Client $MyCID | admittance status $AdmittanceStatus")
					}
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({ AdmittanceStatus == 0  
					}) )
					transition( edgeName="goto",targetState="waitForWaiter", cond=doswitchGuarded({! ( AdmittanceStatus == 0  
					) }) )
				}	 
				state("waitForWaiter") { //this:State
					action { //it:State
						println("Client $MyCID | waiting for the waiter to tell me if I can get in")
						request("waitTime", "waitTime($MyCID)" ,"waiter" )  
					}
					 transition(edgeName="t01",targetState="evalAdmission",cond=whenReply("wait"))
				}	 
				state("evalAdmission") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("wait(TIME)"), Term.createTerm("wait(WAITTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WaitTime = payloadArg(0).toString().toInt() 
						}
						println("Client $MyCID | the waiter told me to wait $WaitTime time")
					}
					 transition( edgeName="goto",targetState="waitingInTheHall", cond=doswitch() )
				}	 
				state("waitingInTheHall") { //this:State
					action { //it:State
						println("Client $MyCID | waiting in the hall")
						request("deploy", "deploy(entrancedoor,table,$MyCID)" ,"waiter" )  
						stateTimer = TimerActor("timer_waitingInTheHall", 
							scope, context!!, "local_tout_simclient_waitingInTheHall", 20000.toLong() )
					}
					 transition(edgeName="t02",targetState="end",cond=whenTimeout("local_tout_simclient_waitingInTheHall"))   
					transition(edgeName="t03",targetState="seated",cond=whenReply("arrived"))
				}	 
				state("seated") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrived(V)"), Term.createTerm("arrived(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 MyTable = payloadArg(0).toString().toInt() 
						}
						println("Client $MyCID | my table is $MyTable")
						request("clientRequest", "clientRequest(order,$MyTable,$MyCID)" ,"waiter" )  
					}
					 transition(edgeName="t04",targetState="ordering",cond=whenReply("atTable"))
				}	 
				state("ordering") { //this:State
					action { //it:State
						println("Client $MyCID | ordering some tea")
						delay(2000) 
						forward("order", "order(tea)" ,"waiter" ) 
					}
					 transition(edgeName="t05",targetState="drinkingTea",cond=whenEvent("deliver"))
				}	 
				state("drinkingTea") { //this:State
					action { //it:State
						println("Client $MyCID | drinking tea")
						delay(10000) 
						request("clientRequest", "clientRequest(pay,$MyTable,$MyCID)" ,"waiter" )  
					}
					 transition(edgeName="t06",targetState="paying",cond=whenReply("atTable"))
				}	 
				state("paying") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("atTable(V)"), Term.createTerm("atTable(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ToPay = payloadArg(0).toString().toInt() 
						}
						println("Client $MyCID | paying $ToPay euro")
						delay(2000) 
						forward("pay", "pay($ToPay)" ,"waiter" ) 
						request("deploy", "deploy($MyTable,exitdoor,$MyCID)" ,"waiter" )  
					}
					 transition(edgeName="t07",targetState="end",cond=whenReply("arrived"))
				}	 
				state("end") { //this:State
					action { //it:State
						println("Client | escorted to the exit door and leaves")
						terminate(0)
					}
				}	 
			}
		}
}
