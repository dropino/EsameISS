/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CTABLE = 0
				var CTEA = ""
				var CCID = ""
				var bJson = json.BarmanJson()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						println("  Barman | INIT  ")
					}
					 transition( edgeName="goto",targetState="waitForNewOrder", cond=doswitch() )
				}	 
				state("waitForNewOrder") { //this:State
					action { //it:State
						println("  Barman | Waiting Order  ")
						
									CTABLE = 0
									bJson.setBusy(false)
									bJson.setPreparingForTable(-1)
									bJson.setPreparingOrder("")
									bJson.setOrderReadyTable(-1)
									bJson.setOrderReady(false)
						updateResourceRep(bJson.toJson() 
						)
					}
					 transition(edgeName="t035",targetState="prepare",cond=whenDispatch("sendOrder"))
				}	 
				state("prepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sendOrder(TEA,TABLE,CID)"), Term.createTerm("sendOrder(TEA,TABLE,CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CTEA = payloadArg(0).toString()
												CTABLE = payloadArg(1).toString().toInt()
												CCID = payloadArg(2).toString()
												
												bJson.setBusy(true)
												bJson.setPreparingForTable(CTABLE)
												bJson.setPreparingOrder(CTEA)
								updateResourceRep(bJson.toJson() 
								)
								println("  Barman | Making $CTEA for client $CCID sit at table $CTABLE")
						}
						delay(5000) 
						forward("orderReady", "orderReady($CTEA,$CTABLE,$CCID)" ,"waiter" ) 
						println("  Barman | $CTEA READY to be served to client $CCID at table $CTABLE")
						
										bJson.setPreparingForTable(-1)
										bJson.setPreparingOrder("")
										bJson.setOrderReadyTable(CTABLE)
										bJson.setOrderReady(true)
						updateResourceRep(bJson.toJson() 
						)
					}
					 transition( edgeName="goto",targetState="waitForNewOrder", cond=doswitch() )
				}	 
			}
		}
}
