System clientsys 
 
mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   
 
//ENTERING THE TEAROOM
//client - smartbell 
Request  ringBell 			: ringBell(TEMP)
Reply 	 tempStatus 		: tempStatus(STATUS, CID) 

//waiter -> client
//Event	 admission 			: admission(MAXWAITTIME, CID)
//Event	 waiterAtEntrance 	: waiterAtEntrance(OK)
//Event	 arrived			: arrived(V, CID) //V is either the table number or the exitdoor
Event 	 deliver 			: deliver (TEA, TABLE) 

Request	deploy				: deploy(FROM, TO, CID)
Reply	arrived				: arrived(V) //V is either the table number or the exitdoor

Request waitTime			: waitTime(CID)
Reply	wait				: wait(TIME)
 
//ORDERING
//client -> waiter
Request  clientRequest		: clientRequest(KIND, TABLE, CID)
Reply	 atTable			: atTable(V) //depending on KIND, V contains "ok" for ordering and the amount owed if "pay"

Dispatch order				: order(TEA)
Dispatch pay				: pay(MONEY)

Context ctxclient	ip [host="localhost"	port=8071]
Context ctxtearoom	ip [host="192.168.1.55"	port=8072]

ExternalQActor smartbell context ctxtearoom
ExternalQActor waiter	 context ctxtearoom

QActor simclient context ctxclient {
	[#
		var WaitTime 			= 0
		var AdmittanceStatus 	= 0 
		
		var MyTemp 				= 0
		var MyTable				= 0
		var MyCID 				= ""
		var ToPay 				= 0
		var X					= 0
	#]
	
		State s0 initial{
			println("Client | INIT")
		} 
		Goto outside
		
		
		State outside{
			println("Client | ringing the bell")
			[# MyTemp = (36..39).random() #] 
			request smartbell -m ringBell: ringBell($MyTemp) //temperature of the client		
		}
		Transition t0 whenReply tempStatus -> evalTemperature
		
		State evalTemperature {
			onMsg ( tempStatus : tempStatus(STATUS, CID)){
				[# 
					AdmittanceStatus = payloadArg(0).toString().toInt()
					MyCID = payloadArg(1).toString()
				#]
				
			}	
			println("Client $MyCID | admittance status $AdmittanceStatus")
				
		}
		Goto end if [# AdmittanceStatus == 0 #] else waitForWaiter
		
		State waitForWaiter {
			println("Client $MyCID | waiting for the waiter to tell me if I can get in")
			request waiter -m waitTime : waitTime($MyCID)
		}
		Transition t0 whenReply wait 			-> evalAdmission
		
		State evalAdmission {			
			onMsg ( wait : wait(WAITTIME)) {
				[# WaitTime = payloadArg(0).toString().toInt()#]
			}
			println("Client $MyCID | the waiter told me to wait $WaitTime time")
		}
//		Goto waitingInTheHall
		Goto end if [# WaitTime == 20000 #] else waitingInTheHall 
		
		State waitingInTheHall{
			println("Client $MyCID | waiting in the hall")
			
			request waiter -m 	deploy : deploy(entrancedoor, table, $MyCID)	
		}
		Transition t0 	whenTime 	20000  				-> end
						whenReply	arrived			 	-> seated
//		Goto end if [# WaitTime == 2000 #] else seated 
		
		
		
		State seated {
			onMsg ( arrived : arrived(TABLE)) {
				[# MyTable = payloadArg(0).toString().toInt()#]
			}
			
			println("Client $MyCID | my table is $MyTable")

			request waiter -m clientRequest : clientRequest(order, $MyTable, $MyCID)
		}
		Transition t0	whenReply atTable 		-> ordering
			
			
		State ordering{
			println("Client $MyCID | ordering some tea")
			delay 2000
			forward waiter -m order : order(tea)
		}
		Transition t0 	whenEvent 	deliver 		-> drinkingTea
				
		
		State drinkingTea{
			println("Client $MyCID | drinking tea")
			delay 10000
			request waiter -m clientRequest : clientRequest(pay, $MyTable, $MyCID)
		}
		Transition t0	whenReply atTable 		-> paying
			
				
		State paying{
			onMsg ( atTable : atTable(V)) {
				[# ToPay = payloadArg(0).toString().toInt()#]
			}
			println("Client $MyCID | paying $ToPay euro") 
			
			delay 2000
			forward waiter -m pay : pay($ToPay)
			
			request waiter -m 	deploy : deploy($MyTable, exitdoor, $MyCID)		
		}
		Transition t0 	whenReply arrived				-> end	
		
		State end {
			println("Client | escorted to the exit door and leaves")
			terminate 0
		}
			
}
